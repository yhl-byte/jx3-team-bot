'''
Author: yhl
Date: 2025-01-XX XX:XX:XX
LastEditors: yhl yuhailong@thalys-tech.onaliyun.com
LastEditTime: 2025-06-05 12:18:32
FilePath: /team-bot/jx3-team-bot/src/plugins/classic_lines_game.py
'''
# src/plugins/classic_lines_game.py
from nonebot import on_regex, on_command, on_message
from nonebot.typing import T_State
from nonebot.adapters.onebot.v11 import MessageEvent, MessageSegment, GroupMessageEvent, Bot, Message
import random
import time
import asyncio
from typing import Dict, List, Optional, Set
from dataclasses import dataclass, field
from enum import Enum
from .game_score import update_player_score

# 游戏状态
class GameStatus(Enum):
    WAITING = "waiting"    # 等待开始
    SIGNUP = "signup"      # 报名中
    PLAYING = "playing"    # 游戏中
    ENDED = "ended"        # 已结束

@dataclass
class Player:
    user_id: str
    nickname: str
    score: int = 0
    correct_count: int = 0

@dataclass
class Question:
    line: str          # 台词
    work: str          # 作品名
    category: str      # 分类（电影/电视剧/动漫等）
    difficulty: int    # 难度等级 1-5

@dataclass
class ClassicLinesGame:
    group_id: str
    status: GameStatus = GameStatus.WAITING
    players: Dict[str, Player] = field(default_factory=dict)
    current_question: Optional[Question] = None
    question_queue: List[Question] = field(default_factory=list)
    current_question_index: int = 0
    start_time: Optional[float] = None
    question_start_time: Optional[float] = None
    game_duration: int = 180  # 3分钟
    question_timeout: int = 30  # 每题30秒超时
    skip_votes: Set[str] = field(default_factory=set)
    skip_threshold: int = 2   # 跳过投票阈值
    answered: bool = False
    game_timer: Optional[asyncio.Task] = None
    question_timer: Optional[asyncio.Task] = None

# 游戏实例存储
games: Dict[str, ClassicLinesGame] = {}

# 经典台词题库
CLASSIC_LINES = [
    
    Question("我想做一个好人。", "无间道", "电影", 2),
    Question("做人如果没有梦想，跟咸鱼有什么分别？", "少林足球", "电影", 2),
    Question("曾经有一份真诚的爱情放在我面前，我没有珍惜。", "大话西游", "电影", 1),
    
    # 电视剧类
    Question("我胡汉三又回来了！", "闪闪的红星", "电视剧", 3),
    Question("额滴神啊！", "武林外传", "电视剧", 1),
    Question("子曾经曰过。", "武林外传", "电视剧", 2),
    Question("我错了，我真的错了，我从一开始就不应该嫁过来。", "大宅门", "电视剧", 3),
    Question("臣妾做不到啊！", "甄嬛传", "电视剧", 1),
    Question("贱人就是矫情。", "甄嬛传", "电视剧", 2),
    Question("你是我的眼，带我领略四季的变换。", "还珠格格", "电视剧", 2),
    Question("山无棱，天地合，乃敢与君绝。", "还珠格格", "电视剧", 3),
    Question("我要这天，再遮不住我眼，要这地，再埋不了我心。", "悟空传", "电视剧", 4),
    Question("若我成佛，天下无魔，若我成魔，佛奈我何。", "悟空传", "电视剧", 4),
    
    # 动漫类
    Question("真相只有一个！", "名侦探柯南", "动漫", 1),
    Question("这就是青春啊！", "火影忍者", "动漫", 2),
    Question("人类的赞歌就是勇气的赞歌！", "JOJO的奇妙冒险", "动漫", 3),
    Question("欧拉欧拉欧拉！", "JOJO的奇妙冒险", "动漫", 2),
    Question("木大木大木大！", "JOJO的奇妙冒险", "动漫", 2),
    Question("我不要做人类了，JOJO！", "JOJO的奇妙冒险", "动漫", 3),
    
    # 经典国产剧
    Question("你是我的小呀小苹果。", "小苹果", "歌曲", 1),
    Question("葫芦娃，葫芦娃，一根藤上七朵花。", "葫芦兄弟", "动画", 1),
    Question("黑猫警长，黑猫警长，森林公民向你致敬。", "黑猫警长", "动画", 2),
    Question("一休哥，一休哥，聪明的一休哥。", "聪明的一休", "动画", 2),
    Question("大头儿子，小头爸爸。", "大头儿子小头爸爸", "动画", 1),
    Question("我们是害虫，我们是害虫。", "黑猫警长", "动画", 3),
    Question("马兰花，马兰花，风吹雨打都不怕。", "马兰花", "童话剧", 3),
    Question("孙悟空，孙悟空，本领真是大。", "西游记", "电视剧", 2),
    Question("白龙马，蹄朝西，驮着唐三藏跟着仨徒弟。", "西游记", "电视剧", 2),
    Question("敢问路在何方，路在脚下。", "西游记", "电视剧", 2),
    
    # 经典综艺
    Question("真香！", "变形计", "综艺", 1),
    Question("我不要你觉得，我要我觉得。", "中餐厅", "综艺", 2),
    Question("雨女无瓜。", "巴啦啦小魔仙", "电视剧", 2),
    Question("要你寡。", "巴啦啦小魔仙", "电视剧", 2),
    Question("古娜拉黑暗之神，呜呼啦呼，黑魔变身！", "巴啦啦小魔仙", "电视剧", 3),
    Question("我命由我不由天！", "哪吒之魔童降世", "电影", 2),
    Question("若命运不公，就和它斗到底！", "哪吒之魔童降世", "电影", 3),
    Question("我是小妖怪，逍遥又自在。", "哪吒之魔童降世", "电影", 2),
    
    # 更多经典台词
    Question("生命诚可贵，爱情价更高，若为自由故，两者皆可抛。", "裴多菲诗歌", "文学", 4),
    Question("天生我材必有用，千金散尽还复来。", "将进酒", "古诗", 3),
    Question("路漫漫其修远兮，吾将上下而求索。", "离骚", "古诗", 4),
    Question("人生自古谁无死，留取丹心照汗青。", "过零丁洋", "古诗", 3),
    Question("海内存知己，天涯若比邻。", "送杜少府之任蜀州", "古诗", 3),
    Question("会当凌绝顶，一览众山小。", "望岳", "古诗", 3),
    Question("落红不是无情物，化作春泥更护花。", "己亥杂诗", "古诗", 4),
    Question("问君能有几多愁，恰似一江春水向东流。", "虞美人", "古诗", 4),
    Question("我要把这个提议给他一个无法拒绝的条件。", "教父", "电影", 3),
    Question("坦白说，亲爱的，我一点也不在乎。", "乱世佳人", "电影", 3),
    Question("没有人把宝贝放在角落里。", "热舞", "电影", 3),
    Question("我是格鲁特。", "银河护卫队", "电影", 1),
    Question("瓦坎达万岁！", "黑豹", "电影", 2),
    Question("我爱你三千遍。", "复仇者联盟：终局之战", "电影", 2),
    Question("现实往往令人失望。", "复仇者联盟：无限战争", "电影", 2),
    Question("我注定要做这件事。", "复仇者联盟：终局之战", "电影", 3),
    
    # 更多中国电影
    Question("我要这铁棒有何用！", "大话西游", "电影", 2),
    Question("爱你一万年。", "大话西游", "电影", 1),
    Question("我的意中人是个盖世英雄。", "大话西游", "电影", 2),
    Question("他好像一条狗啊。", "大话西游", "电影", 2),
    Question("左脚踩右脚。", "功夫", "电影", 2),
    Question("天下武功，唯快不破。", "功夫", "电影", 2),
    Question("还有谁！", "功夫", "电影", 1),
    Question("我要打十个！", "叶问", "电影", 2),
    Question("我要学功夫！", "功夫熊猫", "电影", 1),
    Question("昨天是历史，明天是谜团，但今天是礼物。", "功夫熊猫", "电影", 3),
    Question("师父，我准备好了。", "功夫熊猫", "电影", 2),
    Question("内心的平静。", "功夫熊猫", "电影", 2),
    Question("你的故事可能没有一个如此美好的开端，但这并不能决定你是谁。", "功夫熊猫2", "电影", 4),
    Question("我们都有过去，但过去不能定义我们。", "功夫熊猫3", "电影", 3),
    Question("做人要厚道。", "手机", "电影", 2),
    Question("21世纪什么最贵？人才！", "天下无贼", "电影", 2),
    Question("我最烦你们这些打劫的了，一点技术含量都没有。", "天下无贼", "电影", 3),
    Question("开好车的，不一定是好人。", "天下无贼", "电影", 2),
    Question("人心散了，队伍不好带啊。", "天下无贼", "电影", 3),
    Question("黎叔很生气，后果很严重。", "天下无贼", "电影", 2),
    
    # 更多电视剧台词
    Question("我还是从前那个少年，没有一丝丝改变。", "少年", "歌曲", 2),
    Question("你是我的神。", "来自星星的你", "电视剧", 2),
    Question("都教授，我爱你。", "来自星星的你", "电视剧", 2),
    Question("我的心脏只为你跳动。", "太阳的后裔", "电视剧", 3),
    Question("你是我的阳光。", "太阳的后裔", "电视剧", 2),
    Question("我是你的女人。", "甄嬛传", "电视剧", 2),
    Question("皇上，您还记得大明湖畔的夏雨荷吗？", "还珠格格", "电视剧", 2),
    Question("容嬷嬷，你又拿针扎我！", "还珠格格", "电视剧", 2),
    Question("小燕子，你怎么可以这样对我！", "还珠格格", "电视剧", 2),
    Question("格格，您就饶了奴才吧！", "还珠格格", "电视剧", 2),
    Question("紫薇，你怎么了紫薇！", "还珠格格", "电视剧", 2),
    Question("尔康，你不要走！", "还珠格格", "电视剧", 2),
    Question("我不是针对你，我是说在座的各位都是垃圾。", "中华小当家", "动漫", 3),
    Question("这个味道，是妈妈的味道。", "中华小当家", "动漫", 2),
    Question("料理是爱心。", "中华小当家", "动漫", 2),
    Question("我要成为特级厨师！", "中华小当家", "动漫", 2),
    
   
    
    # 死神系列
    Question("卍解！", "死神", "动漫", 2),
    Question("月牙天冲！", "死神", "动漫", 2),
    Question("我要成为最强的死神！", "死神", "动漫", 2),
    Question("我要救出露琪亚！", "死神", "动漫", 2),
    Question("这就是我的斩魄刀！", "死神", "动漫", 2),
    Question("我要保护空座町！", "死神", "动漫", 3),
    Question("始解！", "死神", "动漫", 2),
    Question("我是代理死神！", "死神", "动漫", 2),
    
    # 进击的巨人
    Question("我要杀光所有巨人！", "进击的巨人", "动漫", 2),
    Question("献出你的心脏！", "进击的巨人", "动漫", 2),
    Question("人类的反击开始了！", "进击的巨人", "动漫", 2),
    Question("我要看看墙外的世界！", "进击的巨人", "动漫", 2),
    Question("自由！", "进击的巨人", "动漫", 2),
    Question("我要夺回玛利亚之墙！", "进击的巨人", "动漫", 3),
    Question("我是进击的巨人！", "进击的巨人", "动漫", 2),
    
    # 鬼灭之刃
    Question("我要变强，保护妹妹！", "鬼灭之刃", "动漫", 2),
    Question("水之呼吸，一之型！", "鬼灭之刃", "动漫", 2),
    Question("我要成为鬼杀队的一员！", "鬼灭之刃", "动漫", 2),
    Question("我要让妹妹变回人类！", "鬼灭之刃", "动漫", 2),
    Question("全集中！", "鬼灭之刃", "动漫", 2),
    Question("雷之呼吸，一之型，霹雳一闪！", "鬼灭之刃", "动漫", 3),
    Question("炎之呼吸！", "鬼灭之刃", "动漫", 2),
    Question("我要斩断这个悲伤的连锁！", "鬼灭之刃", "动漫", 3),
    Question("即使是鬼，也曾经是人。", "鬼灭之刃", "动漫", 3),
    
    # 咒术回战
    Question("我要成为最强的咒术师！", "咒术回战", "动漫", 2),
    Question("领域展开！", "咒术回战", "动漫", 2),
    Question("我是最强的！", "咒术回战", "动漫", 2),
    Question("咒术师的使命就是驱除咒灵！", "咒术回战", "动漫", 3),
    Question("这就是我的咒术！", "咒术回战", "动漫", 2),
    Question("我要变得更强！", "咒术回战", "动漫", 1),
    Question("咒力全开！", "咒术回战", "动漫", 2),
    # 古诗词名句
    Question("床前明月光，疑是地上霜。", "静夜思", "古诗", 1),
    Question("举头望明月，低头思故乡。", "静夜思", "古诗", 2),
    Question("春眠不觉晓，处处闻啼鸟。", "春晓", "古诗", 2),
    Question("夜来风雨声，花落知多少。", "春晓", "古诗", 2),
    Question("白日依山尽，黄河入海流。", "登鹳雀楼", "古诗", 2),
    Question("欲穷千里目，更上一层楼。", "登鹳雀楼", "古诗", 2),
    Question("两个黄鹂鸣翠柳，一行白鹭上青天。", "绝句", "古诗", 3),
    Question("窗含西岭千秋雪，门泊东吴万里船。", "绝句", "古诗", 3),
    Question("锄禾日当午，汗滴禾下土。", "悯农", "古诗", 1),
    Question("谁知盘中餐，粒粒皆辛苦。", "悯农", "古诗", 2),
    Question("离离原上草，一岁一枯荣。", "赋得古原草送别", "古诗", 2),
    Question("野火烧不尽，春风吹又生。", "赋得古原草送别", "古诗", 2),
    Question("慈母手中线，游子身上衣。", "游子吟", "古诗", 2),
    Question("临行密密缝，意恐迟迟归。", "游子吟", "古诗", 3),
    Question("谁言寸草心，报得三春晖。", "游子吟", "古诗", 3),
    Question("红豆生南国，春来发几枝。", "相思", "古诗", 2),
    Question("愿君多采撷，此物最相思。", "相思", "古诗", 3),
    Question("独在异乡为异客，每逢佳节倍思亲。", "九月九日忆山东兄弟", "古诗", 3),
    Question("遥知兄弟登高处，遍插茱萸少一人。", "九月九日忆山东兄弟", "古诗", 4),
    Question("君不见黄河之水天上来，奔流到海不复回。", "将进酒", "古诗", 3),
    
    # 更多古诗词
    Question("大江东去，浪淘尽，千古风流人物。", "念奴娇·赤壁怀古", "古诗", 4),
    Question("江山如画，一时多少豪杰。", "念奴娇·赤壁怀古", "古诗", 3),
    Question("人生如梦，一尊还酹江月。", "念奴娇·赤壁怀古", "古诗", 4),
    Question("明月几时有，把酒问青天。", "水调歌头", "古诗", 3),
    Question("不知天上宫阙，今夕是何年。", "水调歌头", "古诗", 3),
    Question("但愿人长久，千里共婵娟。", "水调歌头", "古诗", 3),
    Question("十年生死两茫茫，不思量，自难忘。", "江城子", "古诗", 4),
    Question("千里孤坟，无处话凄凉。", "江城子", "古诗", 4),
    Question("相顾无言，惟有泪千行。", "江城子", "古诗", 4),
    Question("料得年年肠断处，明月夜，短松冈。", "江城子", "古诗", 5),
    Question("寻寻觅觅，冷冷清清，凄凄惨惨戚戚。", "声声慢", "古诗", 4),
    Question("梧桐更兼细雨，到黄昏、点点滴滴。", "声声慢", "古诗", 4),
    Question("这次第，怎一个愁字了得！", "声声慢", "古诗", 4),
    Question("昨夜雨疏风骤，浓睡不消残酒。", "如梦令", "古诗", 3),
    Question("试问卷帘人，却道海棠依旧。", "如梦令", "古诗", 4),
    Question("知否，知否，应是绿肥红瘦。", "如梦令", "古诗", 3),
    Question("花自飘零水自流，一种相思，两处闲愁。", "一剪梅", "古诗", 4),
    Question("此情无计可消除，才下眉头，却上心头。", "一剪梅", "古诗", 4),
    Question("莫道不销魂，帘卷西风，人比黄花瘦。", "醉花阴", "古诗", 4),
    Question("东篱把酒黄昏后，有暗香盈袖。", "醉花阴", "古诗", 4),
    Question("我的心里只有你没有他。", "心里只有你没有他", "歌曲", 2),
    Question("爱你一万年。", "爱你一万年", "歌曲", 1),
    Question("月亮代表我的心。", "月亮代表我的心", "歌曲", 1),
    Question("甜蜜蜜，你笑得甜蜜蜜。", "甜蜜蜜", "歌曲", 1),
    Question("小城故事多，充满喜和乐。", "小城故事", "歌曲", 2),
    Question("我只在乎你，心甘情愿感染你的气息。", "我只在乎你", "歌曲", 2),
    Question("千言万语，说不完我对你的情意。", "千言万语", "歌曲", 2),
    Question("朋友一生一起走。", "朋友", "歌曲", 1),
    Question("那些年我们一起追的女孩。", "那些年", "歌曲", 2),
    Question("成都，带不走的只有你。", "成都", "歌曲", 2),
    Question("南山南，北海北。", "南山南", "歌曲", 2),
    
    # 经典童谣
    Question("两只老虎，两只老虎，跑得快。", "两只老虎", "童谣", 1),
    Question("小兔子乖乖，把门儿开开。", "小兔子乖乖", "童谣", 1),
    Question("一闪一闪亮晶晶，满天都是小星星。", "小星星", "童谣", 1),
    Question("小燕子，穿花衣。", "小燕子", "童谣", 1),
    Question("春天在哪里呀，春天在哪里。", "春天在哪里", "童谣", 1),
    # 经典广告词
    Question("今年过节不收礼，收礼只收脑白金。", "脑白金", "广告", 2),
    Question("好迪真好，大家好才是真的好。", "好迪", "广告", 2),
    Question("钻石恒久远，一颗永流传。", "钻石", "广告", 2),
    Question("Just do it.", "耐克", "广告", 2),
    Question("I'm lovin' it.", "麦当劳", "广告", 2),
    Question("Think different.", "苹果", "广告", 2),
    Question("Impossible is nothing.", "阿迪达斯", "广告", 3),
    Question("The best or nothing.", "奔驰", "广告", 3),
    Question("Connecting people.", "诺基亚", "广告", 2),
    Question("Innovation for a better world.", "飞利浦", "广告", 3),
    Question("农夫山泉有点甜。", "农夫山泉", "广告", 1),
    Question("怕上火，喝王老吉。", "王老吉", "广告", 1),
    Question("充电五分钟，通话两小时。", "OPPO", "广告", 2),
    Question("年轻，就要醒着拼。", "红牛", "广告", 2),
    Question("你的能量超乎你想象。", "红牛", "广告", 2),
    Question("妈妈再也不用担心我的学习。", "步步高", "广告", 2),
    Question("哪里不会点哪里。", "步步高", "广告", 1),
    Question("So easy，妈妈再也不用担心我的学习了。", "步步高", "广告", 2),
    # 经典游戏台词
    Question("All your base are belong to us.", "Zero Wing", "游戏", 4),
    Question("The cake is a lie.", "传送门", "游戏", 3),
    Question("Would you kindly?", "生化奇兵", "游戏", 3),
    Question("War never changes.", "辐射", "游戏", 3),
    Question("A man chooses, a slave obeys.", "生化奇兵", "游戏", 4),
    Question("Stay awhile and listen.", "暗黑破坏神", "游戏", 3),
    Question("You face Jaraxxus!", "炉石传说", "游戏", 3),
    Question("I need healing!", "守望先锋", "游戏", 2),
    Question("Heroes never die!", "守望先锋", "游戏", 2),
    Question("It's high noon.", "守望先锋", "游戏", 2),
    Question("Nerf this!", "守望先锋", "游戏", 2),
    Question("Justice rains from above!", "守望先锋", "游戏", 3),
    Question("Fire in the hole!", "守望先锋", "游戏", 2),
    Question("Cheers love, the cavalry's here!", "守望先锋", "游戏", 3),
    Question("Experience tranquility.", "守望先锋", "游戏", 3),
    Question("Die! Die! Die!", "守望先锋", "游戏", 2),
    Question("Ryuu ga waga teki wo kurau!", "守望先锋", "游戏", 4),
    Question("Hammer down!", "守望先锋", "游戏", 2),
    Question("I've got you in my sights.", "守望先锋", "游戏", 2),
    Question("Winky face!", "守望先锋", "游戏", 2),
    
    # 更多游戏台词
    Question("Waaagh!", "战锤40K", "游戏", 2),
    Question("For the Emperor!", "战锤40K", "游戏", 3),
    Question("Blood for the Blood God!", "战锤40K", "游戏", 3),
    Question("In the grim darkness of the far future, there is only war.", "战锤40K", "游戏", 4),
    Question("The Emperor protects.", "战锤40K", "游戏", 3),
    Question("Purge the heretics!", "战锤40K", "游戏", 3),
    Question("For the Greater Good!", "战锤40K", "游戏", 3),
    Question("Knowledge is power, guard it well.", "战锤40K", "游戏", 4),
    Question("An open mind is like a fortress with its gates unbarred.", "战锤40K", "游戏", 4),
    Question("Blessed is the mind too small for doubt.", "战锤40K", "游戏", 4),
    
    # 经典书籍名言
    Question("To be or not to be, that is the question.", "哈姆雷特", "文学", 4),
    Question("All animals are equal, but some animals are more equal than others.", "动物农场", "文学", 4),
    Question("It was the best of times, it was the worst of times.", "双城记", "文学", 4),
    Question("Big Brother is watching you.", "1984", "文学", 3),
    Question("War is peace. Freedom is slavery. Ignorance is strength.", "1984", "文学", 4),
    Question("All happy families are alike; each unhappy family is unhappy in its own way.", "安娜·卡列尼娜", "文学", 5),
    Question("Call me Ishmael.", "白鲸", "文学", 3),
    Question("It is a truth universally acknowledged...", "傲慢与偏见", "文学", 4),
    Question("In a hole in the ground there lived a hobbit.", "霍比特人", "文学", 3),
    Question("One ring to rule them all.", "指环王", "文学", 3),
    
    # 更多中文经典文学
    Question("满纸荒唐言，一把辛酸泪。", "红楼梦", "文学", 4),
    Question("都云作者痴，谁解其中味？", "红楼梦", "文学", 4),
    Question("假作真时真亦假，无为有处有还无。", "红楼梦", "文学", 4),
    Question("机关算尽太聪明，反算了卿卿性命。", "红楼梦", "文学", 4),
    Question("花谢花飞花满天，红消香断有谁怜？", "红楼梦", "文学", 4),
    Question("一朝春尽红颜老，花落人亡两不知。", "红楼梦", "文学", 4),
    Question("滚滚长江东逝水，浪花淘尽英雄。", "三国演义", "文学", 3),
    Question("是非成败转头空，青山依旧在，几度夕阳红。", "三国演义", "文学", 4),
    Question("古今多少事，都付笑谈中。", "三国演义", "文学", 3),
    Question("天下大势，分久必合，合久必分。", "三国演义", "文学", 3),

    Question("我会找到你，我会杀了你，这不是威胁，这是承诺，我有一套特殊的技能让我成为你的噩梦。", "飓风营救", "电影", 3),
    Question("Houston，我们有麻烦了，这里是阿波罗13号，我们遇到了严重的问题，需要立即支援。", "阿波罗13号", "电影", 3),
    Question("没有人把宝贝放在角落里，每个人都应该有机会发光发热，展现自己的才华。", "热舞", "电影", 3),
    Question("我是世界之王！站在这艘船的最前端，我感受到了前所未有的自由和力量！", "泰坦尼克号", "电影", 2),
    Question("向无限和更远的地方！这不仅仅是口号，更是我们探索未知世界的勇气和决心！", "玩具总动员", "电影", 3),
    Question("我们需要一艘更大的船，面对这样的巨兽，我们的准备显然还远远不够。", "大白鲨", "电影", 3),
    Question("我不是一个聪明人，但我知道什么是爱，爱就是永远不放弃你所珍视的人。", "阿甘正传", "电影", 3),
    Question("我要给他一个无法拒绝的提议，这是关于尊重、家族荣誉和生死存亡的问题。", "教父", "电影", 4),
    Question("毕竟，明天又是新的一天，无论今天多么艰难，明天总会带来新的希望和机会。", "乱世佳人", "电影", 3),
    Question("我们永远拥有巴黎，那些美好的回忆，没有人能够夺走，它们永远属于我们。", "卡萨布兰卡", "电影", 4),
    Question("这里是约翰尼！我来了，我要打破这扇门，打破所有阻挡我的障碍！", "闪灵", "电影", 3),
    Question("我觉得我们不在堪萨斯了，托托，这里的一切都那么奇怪，那么不同寻常。", "绿野仙踪", "电影", 3),
    Question("我要给他一个他无法拒绝的提议，这是黑手党的规矩，也是对实力的展示。", "教父", "电影", 4),
    Question("我们来这里是为了踢屁股和嚼泡泡糖，而我的泡泡糖用完了，所以现在只能踢屁股了。", "他们活着", "电影", 4),
    Question("我要报仇！为了我死去的师父，为了被践踏的尊严，我要让仇人付出代价！", "杀死比尔", "电影", 3),
    Question("我是你的父亲，路克，加入我，我们可以一起统治银河系，作为父子。", "星球大战", "电影", 3),
    Question("我们要去的地方不需要道路，时间旅行让我们超越了空间的限制。", "回到未来", "电影", 3),
    
    # 经典中国电影台词
    Question("我养你啊！", "喜剧之王", "电影", 1),
    Question("我要这天，再遮不住我眼。", "大话西游", "电影", 3),
    Question("一万年太久，只争朝夕。", "大话西游", "电影", 4),
    Question("我的意中人是个盖世英雄。", "大话西游", "电影", 2),
    Question("我猜中了前头，可是我猜不着这结局。", "大话西游", "电影", 3),
    Question("人生如戏，全靠演技。", "喜剧之王", "电影", 2),
    Question("我不是针对你，我是说在座的各位都是垃圾。", "古惑仔", "电影", 2),
    Question("出来混，迟早要还的。", "无间道", "电影", 1),
    Question("给我一个机会。", "无间道", "电影", 1),
    Question("我想知道，怎样才能让一个女人死心塌地爱上我？", "东邪西毒", "电影", 3),
    Question("人最痛苦的事，莫过于被人误解。", "霸王别姬", "电影", 3),
    Question("不疯魔不成活。", "霸王别姬", "电影", 2),
    Question("我本是男儿郎，又不是女娇娥。", "霸王别姬", "电影", 3),
    Question("师父说，人要往前看，千万不要回头。", "霸王别姬", "电影", 3),
    Question("我要这铁棒有何用！", "大圣归来", "电影", 2),
    
    # 经典电视剧台词
    Question("我要代表月亮消灭你！", "美少女战士", "动漫", 1),
    Question("我的忍道就是不会放弃！", "火影忍者", "动漫", 2),
    Question("这就是青春！", "火影忍者", "动漫", 1),
    
    # 经典国产电视剧
    Question("你是风儿我是沙，缠缠绵绵到天涯。", "还珠格格", "电视剧", 2),
    Question("天地良心，我紫薇真的没有骗你们！", "还珠格格", "电视剧", 2),
    Question("我还是从前那个少年，没有一丝丝改变。", "少年", "歌曲", 1),
    Question("容嬷嬷，你又拿针扎我！", "还珠格格", "电视剧", 1),
    Question("皇阿玛，您还记得大明湖畔的夏雨荷吗？", "还珠格格", "电视剧", 1),
    Question("我错了，我真的错了，我从一开始就不应该嫁过来。", "大宅门", "电视剧", 3),
    Question("我胡汉三又回来了！", "闪闪的红星", "电视剧", 3),
    Question("为了新中国，冲啊！", "董存瑞", "电影", 2),
    Question("同志们，为了胜利，向我开炮！", "英雄儿女", "电影", 3),
    
    # 武侠剧经典台词
    Question("侠之大者，为国为民。", "射雕英雄传", "电视剧", 3),
    Question("十步杀一人，千里不留行。", "侠客行", "小说", 4),
    Question("飞雪连天射白鹿，笑书神侠倚碧鸳。", "金庸作品", "小说", 4),
    Question("此情可待成追忆，只是当时已惘然。", "神雕侠侣", "电视剧", 4),
    Question("问世间情为何物，直教人生死相许。", "神雕侠侣", "电视剧", 3),
    Question("他强由他强，清风拂山岗。", "倚天屠龙记", "小说", 3),
    Question("武功再高，也怕菜刀。", "武林外传", "电视剧", 2),
    Question("葵花宝典，欲练神功，必先自宫。", "笑傲江湖", "小说", 3),
    Question("独孤求败，纵横江湖三十余载，杀尽仇寇，败尽英雄。", "神雕侠侣", "小说", 4),
    Question("桃花影落飞神剑，碧海潮生按玉箫。", "射雕英雄传", "小说", 4),
    
    # 动漫经典台词
    Question("我要成为海贼王！", "海贼王", "动漫", 1),
    Question("我是要成为海贼王的男人！", "海贼王", "动漫", 1),
    Question("这就是我的正义！", "海贼王", "动漫", 2),
    Question("我要变得更强，强到没有人能够打败我！", "海贼王", "动漫", 2),
    Question("我的梦想是成为世界第一的剑豪！", "海贼王", "动漫", 2),
    Question("我要成为勇敢的海上战士！", "海贼王", "动漫", 2),
    Question("我要找到ALL BLUE！", "海贼王", "动漫", 2),
    
    # 宫斗剧经典台词
    Question("臣妾做不到啊！", "甄嬛传", "电视剧", 1),
    Question("贱人就是矫情。", "甄嬛传", "电视剧", 1),
    Question("小主吉祥。", "甄嬛传", "电视剧", 1),
    Question("皇上，您还记得大明湖畔的夏雨荷吗？", "还珠格格", "电视剧", 1),
    Question("本宫乏了。", "甄嬛传", "电视剧", 1),
    Question("姐姐，你好毒啊！", "甄嬛传", "电视剧", 2),
    Question("皇上，臣妾有罪。", "甄嬛传", "电视剧", 2),
    Question("这就是命。", "甄嬛传", "电视剧", 1),
    Question("我要你助我一臂之力。", "甄嬛传", "电视剧", 2),
    Question("你若安好，便是晴天。", "甄嬛传", "电视剧", 2),
    
    # 科幻电影台词
    Question("我会回来的。", "终结者", "电影", 1),
    Question("抵抗是徒劳的。", "星际迷航", "电影", 2),
    Question("这不是你要找的机器人。", "星球大战", "电影", 3),
    Question("愿原力与你同在。", "星球大战", "电影", 2),
    Question("我感觉到了原力的扰动。", "星球大战", "电影", 3),
    Question("做还是不做，没有尝试。", "星球大战", "电影", 3),
    Question("恐惧导致愤怒，愤怒导致仇恨，仇恨导致痛苦。", "星球大战", "电影", 4),
    Question("我们需要去的地方，不需要道路。", "回到未来", "电影", 3),
    
    # 恐怖电影台词
    Question("他们来了！", "活死人之夜", "电影", 2),
    Question("我看见死人了。", "第六感", "电影", 2),
    Question("这里是约翰尼！", "闪灵", "电影", 2),
    Question("我们都在这里疯狂地漂浮。", "小丑回魂", "电影", 3),
    Question("你想玩游戏吗？", "电锯惊魂", "电影", 2),
    Question("我想玩一个游戏。", "电锯惊魂", "电影", 2),
    Question("游戏结束。", "电锯惊魂", "电影", 1),
    Question("你不能杀死恶魔。", "万圣节", "电影", 2),
    Question("他在你身后！", "黑色星期五", "电影", 1),
    
    # 爱情电影台词
    Question("你好，我叫福雷斯特·甘。", "阿甘正传", "电影", 2),
    Question("我爱你，不是因为你是谁，而是因为我在你面前可以是谁。", "爱情电影", "电影", 3),
    Question("爱意味着永远不必说对不起。", "爱情故事", "电影", 3),
    Question("我希望我能退出你。", "断背山", "电影", 3),
    Question("没有人把宝贝放在角落里。", "热舞", "电影", 3),
    Question("你让我想成为一个更好的人。", "尽善尽美", "电影", 3),
    Question("我会找到你的。", "最后的莫希干人", "电影", 2),
    Question("你有我，我有你。", "泰坦尼克号", "电影", 2),
    Question("我永远不会放手，杰克。", "泰坦尼克号", "电影", 2),
    Question("我们永远拥有巴黎。", "卡萨布兰卡", "电影", 4),
    
    # 动作电影台词
    Question("我会找到你，我会杀了你。", "飓风营救", "电影", 2),
    Question("我有一套特殊的技能。", "飓风营救", "电影", 2),
    Question("我感觉需要速度。", "壮志凌云", "电影", 2),
    Question("我要报仇！", "杀死比尔", "电影", 2),
    Question("我太老了，不适合这个。", "致命武器", "电影", 2),
    Question("我会回来的。", "终结者", "电影", 1),
    Question("直到最后一滴血。", "第一滴血", "电影", 2),
    Question("我是法律！", "特警判官", "电影", 2),
    
    # 喜剧电影台词
    Question("我要做一个好人。", "喜剧之王", "电影", 2),
    Question("做人如果没有梦想，跟咸鱼有什么分别？", "少林足球", "电影", 2),
    Question("我养你啊！", "喜剧之王", "电影", 1),
    Question("人生如戏，全靠演技。", "喜剧之王", "电影", 2),
    Question("我是一个演员。", "喜剧之王", "电影", 1),
    Question("努力！奋斗！", "喜剧之王", "电影", 1),
    
    # 经典小说台词
    Question("这是最好的时代，也是最坏的时代。", "双城记", "小说", 4),
    Question("生存还是毁灭，这是一个问题。", "哈姆雷特", "小说", 4),
    Question("人人生而平等。", "独立宣言", "文献", 3),
    Question("我思故我在。", "方法论", "哲学", 4),
    Question("知识就是力量。", "培根名言", "哲学", 3),
    Question("天生我材必有用。", "将进酒", "古诗", 3),
    Question("路漫漫其修远兮，吾将上下而求索。", "离骚", "古诗", 4),
    Question("人生自古谁无死，留取丹心照汗青。", "过零丁洋", "古诗", 3),
    Question("海内存知己，天涯若比邻。", "送杜少府之任蜀州", "古诗", 3),
    Question("会当凌绝顶，一览众山小。", "望岳", "古诗", 3),
    
    # 
    Question("真香！", "变形计", "综艺", 1),
    Question("我不要你觉得，我要我觉得。", "中餐厅", "综艺", 2),
    Question("雨女无瓜。", "巴啦啦小魔仙", "电视剧", 2),
    Question("要你寡。", "巴啦啦小魔仙", "电视剧", 2),
    Question("我命由我不由天！", "哪吒之魔童降世", "电影", 2),
    Question("若命运不公，就和它斗到底！", "哪吒之魔童降世", "电影", 3),
    Question("我是小妖怪，逍遥又自在。", "哪吒之魔童降世", "电影", 2),
    
    # 经典动画台词
    Question("葫芦娃，葫芦娃，一根藤上七朵花。", "葫芦兄弟", "动画", 1),
    Question("黑猫警长，黑猫警长。", "黑猫警长", "动画", 1),
    Question("一休哥，一休哥。", "聪明的一休", "动画", 1),
    Question("大头儿子，小头爸爸。", "大头儿子小头爸爸", "动画", 1),
    Question("我们是害虫，我们是害虫。", "黑猫警长", "动画", 2),
    Question("马兰花，马兰花，风吹雨打都不怕。", "马兰花", "童话", 2),
    Question("白龙马，蹄朝西。", "西游记", "动画", 2),
    Question("敢问路在何方，路在脚下。", "西游记", "电视剧", 2),
    Question("师父，师父！", "西游记", "电视剧", 1),
    Question("俺老孙来也！", "西游记", "电视剧", 1),
    
    # 更多经典台词
    Question("我可以接受失败，但绝对不能接受放弃。", "乔丹名言", "体育", 3),
    Question("生命诚可贵，爱情价更高。", "裴多菲诗歌", "文学", 4),
    Question("落红不是无情物，化作春泥更护花。", "己亥杂诗", "古诗", 4),
    Question("问君能有几多愁，恰似一江春水向东流。", "虞美人", "古诗", 4),
    Question("山重水复疑无路，柳暗花明又一村。", "游山西村", "古诗", 3),
    Question("春风得意马蹄疾，一日看尽长安花。", "登科后", "古诗", 3),
    Question("人生得意须尽欢，莫使金樽空对月。", "将进酒", "古诗", 3),
    Question("安能摧眉折腰事权贵，使我不得开心颜。", "梦游天姥吟留别", "古诗", 4),
    Question("长风破浪会有时，直挂云帆济沧海。", "行路难", "古诗", 3),
    Question("我劝天公重抖擞，不拘一格降人才。", "己亥杂诗", "古诗", 4)

    Question("我一直相信，如果你做正确的事情，好事就会发生。但有时候，正确的事情并不容易做到。", "阿甘正传", "电影", 3),
    Question("生活就像一盒巧克力，你永远不知道下一颗是什么味道，但这正是生活的魅力所在。", "阿甘正传", "电影", 2),
    Question("我可能不是一个聪明人，但我知道什么是爱，爱就是永远不放弃你所珍视的人。", "阿甘正传", "电影", 3),
    Question("愿原力与你同在，年轻的天行者，记住，恐惧是通向黑暗面的道路。", "星球大战", "电影", 3),
    Question("路克，我是你的父亲，加入我，我们可以一起统治银河系，作为父子。", "星球大战", "电影", 2),
    Question("在很久很久以前，在一个遥远的银河系里，正义与邪恶展开了永恒的斗争。", "星球大战", "电影", 4),
    Question("我要给他一个他无法拒绝的提议，这是一个关于尊重和家族荣誉的问题。", "教父", "电影", 4),
    Question("一个男人如果不能陪伴家人，那他就不算是一个真正的男人。", "教父", "电影", 3),
    Question("复仇是一道最好冷着吃的菜，它需要时间来发酵，才能品尝到最完美的味道。", "教父", "电影", 4),
    Question("坦白说，亲爱的，我一点也不在乎，因为明天又是新的一天了。", "乱世佳人", "电影", 3),
    Question("毕竟，明天又是新的一天，我会想办法的，我绝不会再挨饿了。", "乱世佳人", "电影", 3),
    Question("上帝为我作证，我绝不会再挨饿了，即使我要撒谎、偷窃、欺骗或杀人。", "乱世佳人", "电影", 4),
    Question("这里是里克咖啡馆，在这个世界上所有的酒吧里，她偏偏走进了我这一家。", "卡萨布兰卡", "电影", 4),
    Question("我们永远拥有巴黎，那些美好的回忆，没有人能够夺走。", "卡萨布兰卡", "电影", 3),
    Question("路易，我觉得这是一段美好友谊的开始，让我们一起走向未知的未来。", "卡萨布兰卡", "电影", 4),
    Question("我看见死人了，他们到处都是，他们不知道自己已经死了。", "第六感", "电影", 3),
    Question("有些人生来就注定要做伟大的事情，而有些人则是被伟大推着前进。", "肖申克的救赎", "电影", 4),
    Question("希望是美好的，也许是人间至善，而美好的事物永不消逝。", "肖申克的救赎", "电影", 3),
    Question("恐惧能够囚禁你的灵魂，但希望能够让你获得自由，坚强的人能够拯救自己。", "肖申克的救赎", "电影", 4),
    Question("要么忙着活，要么忙着死，这就是生活的全部，没有中间地带。", "肖申克的救赎", "电影", 3),
    Question("我是世界之王！站在这艘船的最前端，我感受到了前所未有的自由。", "泰坦尼克号", "电影", 2),
    Question("你跳我也跳，记住吗？我们说好了要一起面对一切的。", "泰坦尼克号", "电影", 2),
    Question("一个女人的心是深不可测的海洋，充满了秘密和宝藏。", "泰坦尼克号", "电影", 4),
    Question("我永远不会放手，杰克，我永远不会放手，我答应过你的。", "泰坦尼克号", "电影", 3),
    Question("每天都是礼物，这就是为什么我们称之为现在的原因。", "功夫熊猫", "电影", 3),
    Question("昨天是历史，明天是谜团，但今天是礼物，这就是为什么它被称为现在。", "功夫熊猫", "电影", 4),
    Question("你的故事可能没有一个如此美好的开端，但这并不能决定你是谁。", "功夫熊猫2", "电影", 4),
    Question("内心的平静来自于接受你无法改变的事情，并且有勇气去改变你能够改变的。", "功夫熊猫", "电影", 4),
    Question("真正的战士从不放弃，即使面对看似不可能的挑战。", "功夫熊猫", "电影", 3),
    Question("我爱你三千遍，这个数字代表了我对你无尽的爱和承诺。", "复仇者联盟：终局之战", "电影", 2),
    Question("复仇者，集合！这一刻，我们不再是个体，而是一个团队。", "复仇者联盟", "电影", 2),
    Question("我可以做这一整天，因为我相信正义，我相信我们的事业。", "美国队长", "电影", 3),
    Question("能力越大，责任越大，这是每个英雄都必须承担的重担。", "蜘蛛侠", "电影", 3),
    Question("我是钢铁侠，这不是秘密身份，我就是托尼·斯塔克。", "钢铁侠", "电影", 2),
    Question("有时候你必须先跑起来，然后才能学会如何飞翔。", "钢铁侠", "电影", 3),
    Question("现实往往令人失望，但这就是为什么我们需要梦想的原因。", "复仇者联盟：无限战争", "电影", 3),
    Question("我注定要做这件事，这是我的命运，也是我的选择。", "复仇者联盟：终局之战", "电影", 3),
    Question("瓦坎达万岁！我们的传统和科技将引领世界走向更美好的未来。", "黑豹", "电影", 3),
    Question("我是格鲁特，虽然我只能说这三个字，但我的心中充满了对朋友的爱。", "银河护卫队", "电影", 2),
    Question("为什么这么严肃？生活已经够沉重了，我们需要一些混乱来调剂。", "蝙蝠侠：黑暗骑士", "电影", 3),
    Question("你要么死得像个英雄，要么活得足够长久，看着自己变成恶棍。", "蝙蝠侠：黑暗骑士", "电影", 4),
    Question("混乱是公平的，它不会因为你的出身或地位而区别对待任何人。", "蝙蝠侠：黑暗骑士", "电影", 4),
    Question("我不是英雄，我只是一个试图做正确事情的普通人。", "蝙蝠侠：黑暗骑士", "电影", 3),
    Question("黑暗中的骑士不是我们需要的英雄，但却是我们应得的英雄。", "蝙蝠侠：黑暗骑士", "电影", 4),
    Question("我会找到你，我会杀了你，这不是威胁，这是承诺。", "飓风营救", "电影", 2),
    Question("我有一套特殊的技能，这些技能让我成为像你这样的人的噩梦。", "飓风营救", "电影", 3),
    Question("如果你现在放了我女儿，那就到此为止，我不会追究，也不会寻找你。", "飓风营救", "电影", 4),
    Question("但如果你不放，我会寻找你，我会找到你，然后我会杀了你。", "飓风营救", "电影", 3),
    Question("我感觉需要速度，需要那种让血液沸腾的极致体验。", "壮志凌云", "电影", 2),
    Question("你不能处理真相！因为真相需要勇气去面对，而不是每个人都有这种勇气。", "好人寥寥", "电影", 4),
    Question("没有人把宝贝放在角落里，每个人都应该有机会发光发热。", "热舞", "电影", 3),
    Question("这不是你的错，这不是你的错，这不是你的错，孩子。", "心灵捕手", "电影", 2),
    Question("你完成了我，让我成为了一个更好的人，一个完整的人。", "甜心先生", "电影", 3),
    Question("给我钱！给我钱！这句话改变了我们之间的一切。", "甜心先生", "电影", 2),
    Question("我要回家，我要回到那个属于我的地方，那里有我的家人和朋友。", "E.T.外星人", "电影", 3),
    Question("E.T.打电话回家，这是宇宙中最温暖的呼唤。", "E.T.外星人", "电影", 2),
    Question("在这里，在我的心里，你永远和我在一起。", "E.T.外星人", "电影", 3),
    Question("我们需要一艘更大的船，面对这样的挑战，我们的准备还远远不够。", "大白鲨", "电影", 3),
    Question("生活就是一场冒险，要么勇敢地去体验，要么什么都得不到。", "海伦·凯勒传", "电影", 3),
    Question("黑暗无法驱除黑暗，只有光明才能做到，仇恨无法驱除仇恨，只有爱才能做到。", "马丁·路德·金传", "电影", 5),
    Question("我有一个梦想，梦想有一天这个国家会站起来，实现其信条的真正含义。", "马丁·路德·金传", "电影", 4),
    Question("自由不是免费的，它需要每一代人去争取，去保护，去传承。", "勇敢的心", "电影", 4),
    Question("他们可以夺走我们的生命，但他们永远夺不走我们的自由！", "勇敢的心", "电影", 3),
    Question("每个人都会死，但不是每个人都真正活过。", "勇敢的心", "电影", 3),
    Question("如果你有机会回到过去，告诉敌人你宁死不屈，你会这样做吗？", "勇敢的心", "电影", 4),
    Question("我可以接受失败，但我绝对不能接受放弃，因为放弃意味着停止尝试。", "乔丹传记片", "电影", 3),
    Question("成功不是终点，失败也不是末日，重要的是继续前进的勇气。", "丘吉尔传", "电影", 4),
    Question("我们永远不会投降，我们将在海滩上战斗，在街道上战斗。", "敦刻尔克", "电影", 4),
    Question("有时候，撤退也是一种胜利，因为它保存了希望和未来。", "敦刻尔克", "电影", 4),
    Question("时间是最宝贵的资源，我们不能浪费一分一秒。", "时间机器", "电影", 3),
    Question("爱情是唯一能够超越时间和空间的力量，它连接着过去、现在和未来。", "时空恋旅人", "电影", 4),
    Question("如果你能够重新来过，你会做出不同的选择吗？", "土拨鼠之日", "电影", 3),
    Question("每一天都是一个新的开始，一个重新定义自己的机会。", "土拨鼠之日", "电影", 3),
    Question("生命的意义不在于我们活了多久，而在于我们如何度过这些时光。", "本杰明·巴顿奇事", "电影", 4),
    Question("我们注定要失去我们所爱的人，否则我们怎么知道他们对我们有多重要？", "本杰明·巴顿奇事", "电影", 4),
    Question("你永远不知道接下来会发生什么，这就是生活的魅力所在。", "本杰明·巴顿奇事", "电影", 3),
    Question("有些人注定要坐在河边，有些人注定要被闪电击中，有些人注定要成为音乐家。", "本杰明·巴顿奇事", "电影", 5),
    Question("我们都在某种程度上是时间的囚徒，但爱能够让我们获得自由。", "时间旅行者的妻子", "电影", 4),
    Question("真正的爱情不会因为时间的流逝而减少，反而会变得更加深刻。", "时间旅行者的妻子", "电影", 4),
    Question("记忆是我们拥有的最珍贵的财富，它们构成了我们的身份。", "记忆碎片", "电影", 4),
    Question("我们是谁，不是由我们记得什么决定的，而是由我们选择成为什么样的人决定的。", "记忆碎片", "电影", 5),
    Question("现实和梦境之间的界限有时候并不像我们想象的那么清晰。", "盗梦空间", "电影", 4),
    Question("一个想法就像病毒一样，具有高度的传染性，最小的种子就能成长为定义或摧毁你的东西。", "盗梦空间", "电影", 5),
    Question("我们需要更深入，我们需要进入梦境中的梦境。", "盗梦空间", "电影", 3),
    Question("什么是真实？如果你说的真实是指你能感觉到的、闻到的、尝到的和看到的，那么真实只是你大脑解释的电子信号。", "黑客帝国", "电影", 5),
    Question("这是你最后的机会，在这之后，就没有回头路了。", "黑客帝国", "电影", 3),
    Question("红色药丸还是蓝色药丸？这是一个关于真相和无知的选择。", "黑客帝国", "电影", 4),
    Question("欢迎来到真实的荒漠，欢迎来到机器的世界。", "黑客帝国", "电影", 3),
    Question("我知道功夫，这不仅仅是技能，更是一种觉醒。", "黑客帝国", "电影", 3),
    Question("没有勺子，真正需要弯曲的不是勺子，而是你自己。", "黑客帝国", "电影", 4),
    Question("爱情是一种选择，我们选择去爱，也选择被爱。", "真爱至上", "电影", 3),
    Question("如果你不能说出口，就写下来，如果你不能写下来，就用行动证明。", "真爱至上", "电影", 4),
    Question("爱情实际上无处不在，只要你用心去寻找，你就会发现它。", "真爱至上", "电影", 3),
    Question("最美好的爱情故事从来不是关于完美的人，而是关于不完美的人如何完美地相爱。", "真爱至上", "电影", 5),
    Question("我们都在寻找那个能够理解我们、接受我们、爱我们的人。", "当哈利遇见莎莉", "电影", 4),
    Question("男人和女人能够成为朋友吗？这个问题的答案比我们想象的要复杂。", "当哈利遇见莎莉", "电影", 4),
    Question("我要你知道，当我意识到我想和你共度余生时，我希望余生从现在开始。", "当哈利遇见莎莉", "电影", 4),
    Question("有时候，最好的朋友就是你一直在寻找的那个人。", "当哈利遇见莎莉", "电影", 3),
    Question("音乐是灵魂的语言，它能够表达言语无法表达的情感。", "音乐之声", "电影", 4),
    Question("当上帝关闭一扇门时，他会在某个地方为你打开一扇窗。", "音乐之声", "电影", 3),
    Question("让我们从最开始的地方开始，这是一个非常好的开始地方。", "音乐之声", "电影", 3),
    Question("山丘因音乐而生动，我的心因歌声而跳动。", "音乐之声", "电影", 3),
    Question("勇气不是没有恐惧，而是面对恐惧时仍然选择前进。", "绿野仙踪", "电影", 4),
    Question("没有地方比得上家，因为家是心灵的归宿。", "绿野仙踪", "电影", 3),
    Question("你一直拥有回家的力量，你只需要学会如何使用它。", "绿野仙踪", "电影", 4),
    Question("如果我们寻找的东西一直在我们心中，为什么我们要到那么远的地方去寻找？", "绿野仙踪", "电影", 4),
    Question("友谊是最珍贵的礼物，它不需要任何回报，只需要真诚的心。", "玩具总动员", "电影", 4),
    Question("飞向宇宙，浩瀚无垠！这不仅仅是一句口号，更是一种精神。", "玩具总动员", "电影", 3),
    Question("你是一个玩具！但你也是一个朋友，这两者并不矛盾。", "玩具总动员", "电影", 3),
    Question("我们玩具的使命就是陪伴孩子们成长，给他们带来快乐。", "玩具总动员", "电影", 3),
    Question("成长意味着学会放手，但这并不意味着忘记那些美好的回忆。", "玩具总动员3", "电影", 4),
    Question("即使我们分开了，我们之间的友谊也会永远存在。", "玩具总动员3", "电影", 3),
    Question("每个结束都是一个新的开始，每个告别都是一个新的相遇的前奏。", "玩具总动员4", "电影", 4),
    Question("我们的价值不在于我们被如何对待，而在于我们如何对待别人。", "玩具总动员4", "电影", 4),
    Question("我要成为海贼王的男人！这不仅仅是一个梦想，更是我对自由的渴望和对伙伴的承诺！", "海贼王", "动漫", 2),
    Question("伙伴是什么？伙伴就是即使全世界都背叛你，也会站在你身边的人！", "海贼王", "动漫", 3),
    Question("我绝对不会让任何人伤害我的伙伴，即使要付出生命的代价！", "海贼王", "动漫", 3),
    Question("梦想是不会逃跑的，逃跑的永远都是自己，所以我绝对不会放弃！", "海贼王", "动漫", 4),
    Question("人的梦想是不会结束的！只要还有一口气在，就要为梦想而战斗！", "海贼王", "动漫", 3),
    Question("我要成为世界第一的大剑豪，这是我对死去挚友的承诺，也是我存在的意义！", "海贼王", "动漫", 4),
    Question("即使是死，我也不能让背后的伤疤蒙羞，因为那是逃跑者的耻辱！", "海贼王", "动漫", 4),
    Question("我要画出世界地图，看遍这个世界的每一个角落，这是我的梦想！", "海贼王", "动漫", 3),
    Question("我要成为勇敢的海上战士，像我的父亲一样，保护我所珍视的一切！", "海贼王", "动漫", 4),
    Question("我要找到ALL BLUE，那个传说中所有海洋鱼类汇聚的奇迹之海！", "海贼王", "动漫", 3),
    Question("我要成为能够治愈任何疾病的医生，让这个世界不再有人因病痛而失去生命！", "海贼王", "动漫", 4),
    Question("历史的真相不应该被掩埋，我要用我的生命去守护这些珍贵的知识！", "海贼王", "动漫", 4),
    Question("音乐是连接心灵的桥梁，我要用我的音乐给大家带来快乐和希望！", "海贼王", "动漫", 3),
    Question("我要重新与拉布相遇，完成我们50年前的约定，这是我活下去的理由！", "海贼王", "动漫", 4),
    Question("我要成为火影，让村子里的每一个人都认可我的存在，保护我珍视的一切！", "火影忍者", "动漫", 3),
    Question("我绝对不会放弃，因为放弃就意味着背叛了那些相信我的人！", "火影忍者", "动漫", 3),
    Question("我要保护重要的人，即使要与全世界为敌，我也在所不辞！", "火影忍者", "动漫", 3),
    Question("忍者的世界没有后悔这两个字，我们只能勇敢地面对未来！", "火影忍者", "动漫", 4),
    Question("这就是我的忍道！永远不背叛伙伴，永远不放弃希望！", "火影忍者", "动漫", 3),
    Question("我要超越所有前代火影，成为史上最强的火影，保护木叶村！", "火影忍者", "动漫", 3),
    Question("真正的力量不是来自仇恨，而是来自保护重要之人的决心！", "火影忍者", "动漫", 4),
    Question("即使是敌人，我也要试着去理解他们的痛苦，因为我们都是人！", "火影忍者", "动漫", 4),
    Question("我要改变这个充满仇恨的忍者世界，让和平真正降临！", "火影忍者", "动漫", 4),
    Question("友情的力量比任何忍术都要强大，它能够改变一切！", "火影忍者", "动漫", 3),
    Question("我要变强，强到足以保护妹妹，让她重新变回人类！", "鬼灭之刃", "动漫", 3),
    Question("全集中呼吸法不仅仅是技巧，更是对生命的尊重和对责任的承担！", "鬼灭之刃", "动漫", 4),
    Question("即使是鬼，也曾经是人，我要斩断这个悲伤的连锁反应！", "鬼灭之刃", "动漫", 4),
    Question("我要成为鬼杀队最强的剑士，消灭所有的鬼，拯救更多的人！", "鬼灭之刃", "动漫", 3),
    Question("水之呼吸承载着师父的意志，我要将这份力量传承下去！", "鬼灭之刃", "动漫", 4),
    Question("雷之呼吸一之型霹雳一闪，这是我唯一会的招式，但我要把它练到极致！", "鬼灭之刃", "动漫", 4),
    Question("炎之呼吸代表着不屈的意志，我要燃烧自己的生命来保护他人！", "鬼灭之刃", "动漫", 4),
    Question("温柔不是弱点，而是最强大的力量，因为它能够拯救迷失的灵魂！", "鬼灭之刃", "动漫", 4),
    Question("我要杀光所有巨人，为了人类的自由，为了夺回我们的尊严！", "进击的巨人", "动漫", 3),
    Question("献出你的心脏！这是我们对自由的渴望，对胜利的誓言！", "进击的巨人", "动漫", 3),
    Question("人类的反击开始了！我们不再是被圈养的家畜，而是自由的战士！", "进击的巨人", "动漫", 4),
    Question("我要看看墙外的世界，那里有海洋，有火焰之水，有冰之大地！", "进击的巨人", "动漫", 4),
    Question("自由是什么？自由就是能够选择自己的道路，不被任何人束缚！", "进击的巨人", "动漫", 4),
    Question("我要夺回玛利亚之墙，夺回人类失去的领土和尊严！", "进击的巨人", "动漫", 3),
    Question("战斗！战斗！战斗！只有战斗才能获得自由，才能保护重要的人！", "进击的巨人", "动漫", 3),
    Question("即使这个世界残酷得让人绝望，我们也要为了希望而战斗下去！", "进击的巨人", "动漫", 4),
    Question("我要成为最强的咒术师，驱除所有的咒灵，保护无辜的人们！", "咒术回战", "动漫", 3),
    Question("领域展开不仅仅是技术，更是咒术师意志和信念的体现！", "咒术回战", "动漫", 4),
    Question("咒术师的使命就是驱除咒灵，即使要付出生命的代价也在所不辞！", "咒术回战", "动漫", 4),
    Question("我是最强的！这不是自大，而是对自己实力的绝对自信！", "咒术回战", "动漫", 3),
    Question("咒力来自于负面情绪，但我们要用它来保护正面的事物！", "咒术回战", "动漫", 4),
    Question("即使面对死亡，我也要保护我的学生，这是老师的责任！", "咒术回战", "动漫", 4),
    Question("真正的强者不是没有恐惧，而是即使恐惧也要勇敢前进！", "咒术回战", "动漫", 4),
    Question("我要变得更强，强到能够改变这个不合理的咒术界！", "咒术回战", "动漫", 3),
    Question("龟派气功波！这不仅仅是招式，更是武道家精神的体现！", "龙珠", "动漫", 2),
    Question("我是超级赛亚人！愤怒和正义的力量让我突破了极限！", "龙珠", "动漫", 3),
    Question("这还不是我的最终形态！我还能变得更强，强到超越一切！", "龙珠", "动漫", 3),
    Question("召唤神龙吧！实现我们的愿望，让这个世界变得更美好！", "龙珠", "动漫", 2),
    Question("我要收集七颗龙珠，不是为了私欲，而是为了拯救重要的人！", "龙珠", "动漫", 3),
    Question("界王拳是超越极限的技巧，即使身体承受不了也要使用！", "龙珠", "动漫", 4),
    Question("元气弹凝聚了所有生命的力量，这是正义战胜邪恶的证明！", "龙珠", "动漫", 4),
    Question("真正的武道家永远不会停止修炼，因为变强是没有尽头的！", "龙珠", "动漫", 4),
    Question("卍解！这是死神的最高奥义，代表着对力量的完全掌控！", "死神", "动漫", 3),
    Question("月牙天冲！这是我从父亲那里继承的力量，也是我保护伙伴的武器！", "死神", "动漫", 4),
    Question("我要成为最强的死神，保护现世和尸魂界的和平！", "死神", "动漫", 3),
    Question("我要救出露琪亚，即使要与整个尸魂界为敌也在所不辞！", "死神", "动漫", 3),
    Question("这就是我的斩魄刀！它不仅仅是武器，更是我灵魂的体现！", "死神", "动漫", 3),
    Question("我要保护空座町，保护我生活的这个城市和这里的人们！", "死神", "动漫", 3),
    Question("始解只是开始，真正的力量在于与斩魄刀的心灵沟通！", "死神", "动漫", 4),
    Question("我是代理死神！承担着连接两个世界的重要使命！", "死神", "动漫", 3),
    Question("真相只有一个！无论多么复杂的案件，都有它的真相等待被发现！", "名侦探柯南", "动漫", 3),
    Question("推理不是为了炫耀智慧，而是为了还原事实，给受害者一个公道！", "名侦探柯南", "动漫", 4),
    Question("犯罪没有完美的，总会留下蛛丝马迹，这就是侦探存在的意义！", "名侦探柯南", "动漫", 4),
    Question("即使身体变小了，我的头脑依然是高中生侦探工藤新一！", "名侦探柯南", "动漫", 3),
    Question("正义也许会迟到，但永远不会缺席，这就是我坚持下去的理由！", "名侦探柯南", "动漫", 4),
    Question("每一个案件背后都有人性的复杂，我要用推理揭示真相！", "名侦探柯南", "动漫", 4),
    Question("科学的力量是无穷的，它能够帮助我们解开所有的谜团！", "名侦探柯南", "动漫", 3),
    Question("我要找回原来的身体，回到小兰身边，保护我爱的人！", "名侦探柯南", "动漫", 3),
    Question("燃烧吧，我的小宇宙！为了正义，为了爱与和平而战斗！", "圣斗士星矢", "动漫", 3),
    Question("圣斗士的使命就是保护雅典娜，守护大地上的爱与正义！", "圣斗士星矢", "动漫", 4),
    Question("即使粉身碎骨，我也要保护我所信仰的正义和我所爱的人！", "圣斗士星矢", "动漫", 4),
    Question("小宇宙的力量来自于内心的信念，只要信念不灭，力量就无穷无尽！", "圣斗士星矢", "动漫", 5),
    Question("黄金圣斗士的荣耀不是来自于力量，而是来自于守护的决心！", "圣斗士星矢", "动漫", 4),
    Question("为了雅典娜，为了大地的和平，我愿意献出我的生命！", "圣斗士星矢", "动漫", 4),
    Question("真正的圣斗士不会被任何困难击倒，因为我们心中有爱！", "圣斗士星矢", "动漫", 4),
    Question("奇迹只会降临在那些不放弃希望的人身上！", "圣斗士星矢", "动漫", 3),
    Question("人类的赞歌就是勇气的赞歌！面对任何困难都要勇敢前进！", "JOJO的奇妙冒险", "动漫", 4),
    Question("欧拉欧拉欧拉！这是我的替身攻击，代表着不屈的战斗意志！", "JOJO的奇妙冒险", "动漫", 3),
    Question("木大木大木大！时间停止的能力让我掌控了战斗的节奏！", "JOJO的奇妙冒险", "动漫", 3),
    Question("我不要做人类了，JOJO！为了获得永恒的生命，我放弃了人性！", "JOJO的奇妙冒险", "动漫", 4),
    Question("替身是精神力的体现，只有意志坚强的人才能觉醒替身！", "JOJO的奇妙冒险", "动漫", 4),
    Question("黄金精神就是为了正确的事情而战斗，即使要付出生命的代价！", "JOJO的奇妙冒险", "动漫", 5),
    Question("命运是可以改变的，只要有足够的决心和勇气去挑战它！", "JOJO的奇妙冒险", "动漫", 4),
    Question("真正的绅士即使在最危险的时刻也要保持优雅和尊严！", "JOJO的奇妙冒险", "动漫", 4),
    Question("我不是针对你，我是说在座的各位都是垃圾！料理的世界容不下半点马虎！", "中华小当家", "动漫", 4),
    Question("这个味道，是妈妈的味道！料理中最重要的调料就是爱和回忆！", "中华小当家", "动漫", 3),
    Question("料理是爱心的体现，没有爱心的料理永远无法感动人心！", "中华小当家", "动漫", 3),
    Question("我要成为特级厨师！用我的料理给所有人带来幸福和感动！", "中华小当家", "动漫", 3),
    Question("真正的料理人不仅要有技术，更要有一颗为他人着想的心！", "中华小当家", "动漫", 4),
    Question("料理的奥义在于用心去感受食材，用爱去调味每一道菜！", "中华小当家", "动漫", 4),
    Question("传说中的厨具不是为了炫耀，而是为了做出能够拯救人心的料理！", "中华小当家", "动漫", 4),
    Question("美食能够跨越国界，连接不同文化的人们，这就是料理的力量！", "中华小当家", "动漫", 4),
    Question("我要成为宝可梦大师！和我的伙伴们一起踏遍整个世界！", "宝可梦", "动漫", 3),
    Question("宝可梦不是工具，而是我们的伙伴，我们要互相信任，共同成长！", "宝可梦", "动漫", 4),
    Question("每一只宝可梦都有它独特的魅力，我要收集所有的宝可梦！", "宝可梦", "动漫", 3),
    Question("训练师和宝可梦之间的羁绊比任何技能都要重要！", "宝可梦", "动漫", 3),
    Question("即使失败了也不要放弃，因为每一次失败都是成长的机会！", "宝可梦", "动漫", 3),
    Question("宝可梦对战不是为了伤害，而是为了让彼此变得更强！", "宝可梦", "动漫", 3),
    Question("我要保护所有的宝可梦，让它们在这个世界上快乐地生活！", "宝可梦", "动漫", 3),
    Question("真正的宝可梦大师不是最强的训练师，而是最懂得爱护宝可梦的人！", "宝可梦", "动漫", 4),
    Question("我要成为职业英雄！用我的个性拯救更多需要帮助的人！", "我的英雄学院", "动漫", 3),
    Question("即使没有个性，我也要成为英雄，因为英雄的本质不在于能力而在于内心！", "我的英雄学院", "动漫", 5),
    Question("Plus Ultra！超越极限！这是雄英高校的校训，也是我的人生信条！", "我的英雄学院", "动漫", 4),
    Question("真正的英雄不是为了名声和金钱，而是为了拯救他人而战斗！", "我的英雄学院", "动漫", 4),
    Question("One For All的力量不属于我一个人，它承载着历代继承者的意志！", "我的英雄学院", "动漫", 5),
    Question("我要成为像欧尔麦特一样的英雄，给人们带来希望和安全感！", "我的英雄学院", "动漫", 4),
    Question("个性只是工具，真正重要的是使用它的人的内心和意志！", "我的英雄学院", "动漫", 4),
    Question("即使全世界都反对我，我也要坚持自己的英雄道路！", "我的英雄学院", "动漫", 4),
    Question("我要用我的音乐改变世界，让所有人都能感受到音乐的美好！", "你的名字", "动漫", 3),
    Question("无论我们相隔多远，无论时间如何流逝，我们的心永远连在一起！", "你的名字", "动漫", 4),
    Question("命运让我们相遇，即使在不同的时空，我们也要找到彼此！", "你的名字", "动漫", 4),
    Question("重要的不是我们失去了什么，而是我们还拥有什么！", "你的名字", "动漫", 3),
    Question("时间可能会让我们忘记很多事情，但真正重要的感情永远不会消失！", "你的名字", "动漫", 4),
    Question("我要找到你，无论你在哪里，无论要花多长时间！", "你的名字", "动漫", 3),
    Question("梦境和现实的界限有时候并不清晰，但感情是真实的！", "你的名字", "动漫", 4),
    Question("每一次相遇都是奇迹，我们要珍惜每一个相遇的瞬间！", "你的名字", "动漫", 3),
    Question("我要保护茵蒂克丝！", "魔法禁书目录", "动漫", 2),
    Question("科学和魔法都是为了保护重要的人！", "魔法禁书目录", "动漫", 4),
    Question("即使失去记忆，我也要保护大家！", "魔法禁书目录", "动漫", 3),
    Question("我的右手能够消除一切异能！", "魔法禁书目录", "动漫", 3),
    Question("不幸啊！为什么总是我遇到麻烦！", "魔法禁书目录", "动漫", 2),
    Question("我要成为学园都市最强的超能力者！", "某科学的超电磁炮", "动漫", 3),
    Question("正义也许会迟到，但绝不会缺席！", "某科学的超电磁炮", "动漫", 4),
    Question("你指尖跃动的电光 是我此生不变的信仰", "某科学的超电磁炮", "动漫", 2),
]

# 开始游戏命令
start_game = on_regex(pattern=r'^开始台词$', priority=1)
@start_game.handle()
async def handle_start_game(bot: Bot, event: GroupMessageEvent, state: T_State):
    group_id = str(event.group_id)
    user_id = str(event.user_id)
    
    # 检查是否已有游戏在进行
    if group_id in games and games[group_id].status != GameStatus.WAITING and games[group_id].status != GameStatus.ENDED:
        await start_game.finish(message="台词大挑战游戏已经在进行中，请等待当前游戏结束")
        return
    
    # 创建新游戏
    games[group_id] = ClassicLinesGame(group_id=group_id)
    games[group_id].status = GameStatus.SIGNUP
    
    await start_game.finish(message="🎭 经典台词大挑战开始报名！\n请想参加的玩家发送「报名台词」或「jump」。\n发送「结束台词报名」开始游戏。\n⏰ 300秒后自动结束报名")
    
    # 300秒后自动结束报名
    await asyncio.sleep(300)
    
    if group_id in games and games[group_id].status == GameStatus.SIGNUP:
        if len(games[group_id].players) < 1:
            await bot.send_group_msg(group_id=int(group_id), message="报名人数不足，游戏取消")
            del games[group_id]
        else:
            await start_game_process(bot, group_id)

# 报名命令
signup_game = on_regex(pattern=r'^(报名台词|jump)$', priority=1)
@signup_game.handle()
async def handle_signup(bot: Bot, event: GroupMessageEvent, state: T_State):
    group_id = str(event.group_id)
    user_id = str(event.user_id)
    
    if group_id not in games or games[group_id].status != GameStatus.SIGNUP:
        await signup_game.finish(message="当前没有台词大挑战游戏正在报名")
        return
    
    if user_id in games[group_id].players:
        await signup_game.finish(message="你已经报名了")
        return
    
    # 添加玩家
    games[group_id].players[user_id] = Player(
        user_id=user_id,
        nickname=event.sender.nickname or f"玩家{len(games[group_id].players) + 1}"
    )
    
    msg = (
        MessageSegment.at(event.user_id) + 
        Message(f" {event.sender.nickname} 报名成功！当前已有 {len(games[group_id].players)} 人报名")
    )
    await signup_game.finish(message=Message(msg))

# 结束报名命令
end_signup = on_regex(pattern=r'^结束台词报名$', priority=1)
@end_signup.handle()
async def handle_end_signup(bot: Bot, event: GroupMessageEvent, state: T_State):
    group_id = str(event.group_id)
    
    if group_id not in games or games[group_id].status != GameStatus.SIGNUP:
        await end_signup.finish(message="当前没有台词大挑战游戏正在报名")
        return
    
    if len(games[group_id].players) < 1:
        await end_signup.finish(message="报名人数不足，无法开始游戏")
        return
    
    await start_game_process(bot, group_id)

# 开始游戏流程
async def start_game_process(bot: Bot, group_id: str):
    game = games[group_id]
    game.status = GameStatus.PLAYING
    game.start_time = time.time()
    
    # 随机选择题目
    game.question_queue = random.sample(CLASSIC_LINES, min(20, len(CLASSIC_LINES)))
    game.current_question_index = 0
    
    await bot.send_group_msg(
        group_id=int(group_id), 
        message=f"🎭 台词大挑战开始！\n⏰ 游戏时长：3分钟\n👥 参与玩家：{len(game.players)}人\n\n准备好了吗？第一题即将开始..."
    )
    
    # 设置游戏计时器
    game.game_timer = asyncio.create_task(game_timer(bot, group_id))
    
    # 开始第一题
    await asyncio.sleep(3)
    await next_question(bot, group_id)

# 下一题
async def next_question(bot: Bot, group_id: str):
    game = games[group_id]
    
    # 检查游戏是否应该结束
    if game.status != GameStatus.PLAYING:
        return
    
    if game.current_question_index >= len(game.question_queue):
        await end_game(bot, group_id, "题目已全部完成")
        return
    
    # 获取当前题目
    game.current_question = game.question_queue[game.current_question_index]
    game.question_start_time = time.time()
    game.answered = False
    game.skip_votes.clear()
    
    # 发送题目
    question_msg = f"📝 第 {game.current_question_index + 1} 题\n\n💬 台词：{game.current_question.line}\n\n📚 类别：{game.current_question.category}\n\n🎯 请猜出这句台词出自哪部作品⏰ 30秒答题时间\n💡 发送 'p' 可发起跳过投票"
    
    await bot.send_group_msg(group_id=int(group_id), message=question_msg)
    
    # 设置题目计时器
    if game.question_timer:
        game.question_timer.cancel()
    game.question_timer = asyncio.create_task(question_timer(bot, group_id))

# 题目计时器
async def question_timer(bot: Bot, group_id: str):
    await asyncio.sleep(30)  # 30秒超时
    
    if group_id in games and games[group_id].status == GameStatus.PLAYING and not games[group_id].answered:
        game = games[group_id]
        await bot.send_group_msg(
            group_id=int(group_id), 
            message=f"⏰ 时间到！\n正确答案是：{game.current_question.work}\n分类：{game.current_question.category}"
        )
        
        # 进入下一题
        game.current_question_index += 1
        await asyncio.sleep(2)
        await next_question(bot, group_id)

# 游戏计时器
async def game_timer(bot: Bot, group_id: str):
    await asyncio.sleep(180)  # 3分钟
    
    if group_id in games and games[group_id].status == GameStatus.PLAYING:
        await end_game(bot, group_id, "游戏时间结束")

# 处理答案
answer_handler = on_message(priority=10)
@answer_handler.handle()
async def handle_answer(bot: Bot, event: GroupMessageEvent, state: T_State):
    group_id = str(event.group_id)
    user_id = str(event.user_id)
    message = str(event.get_message()).strip()
    
    # 检查是否在游戏中
    if group_id not in games or games[group_id].status != GameStatus.PLAYING:
        return
    
    game = games[group_id]
    
    # 检查是否是参与者
    if user_id not in game.players:
        return
    
    # 检查是否已经有人答对
    if game.answered:
        return
    
    # 处理跳过投票
    if message.lower() == "p":
        await handle_skip_vote(bot, event, game)
        return
    
    # 检查答案
    if game.current_question and check_answer(message, game.current_question.work):
        game.answered = True
        
        # 取消题目计时器
        if game.question_timer:
            game.question_timer.cancel()
        
        # 计算得分
        time_bonus = max(0, 10 - int(time.time() - game.question_start_time) // 3)  # 最高10分，每3秒减1分
        difficulty_bonus = game.current_question.difficulty  # 难度1-4分
        base_score = 3  # 基础分降低到3分
        total_score = base_score + time_bonus + difficulty_bonus
        
        # 更新玩家分数
        game.players[user_id].score += total_score
        game.players[user_id].correct_count += 1
        
        # 发送正确消息
        msg = (
            MessageSegment.at(event.user_id) + 
            Message(f" 回答正确！🎉\n\n📝 答案：{game.current_question.work}\n🏆 获得积分：{total_score}分\n⏰ 用时奖励：{time_bonus}分\n⭐ 难度奖励：{difficulty_bonus}分")
        )
        await bot.send_group_msg(group_id=int(group_id), message=Message(msg))
        
        # 进入下一题
        game.current_question_index += 1
        await asyncio.sleep(3)
        await next_question(bot, group_id)

# 检查答案
def check_answer(user_answer: str, correct_answer: str) -> bool:
    """检查用户答案是否正确"""
    # 移除空格和标点符号，转换为小写进行比较
    import re
    
    def normalize(text: str) -> str:
        # 移除空格、标点符号
        text = re.sub(r'[\s\W]+', '', text)
        return text.lower()
    
    user_normalized = normalize(user_answer)
    correct_normalized = normalize(correct_answer)
    
    # 完全匹配
    if user_normalized == correct_normalized:
        return True
    
    # 包含匹配（用户答案包含正确答案或正确答案包含用户答案）
    if len(user_normalized) >= 2 and len(correct_normalized) >= 2:
        if user_normalized in correct_normalized or correct_normalized in user_normalized:
            return True
    
    return False

# 处理跳过投票
async def handle_skip_vote(bot: Bot, event: GroupMessageEvent, game: ClassicLinesGame):
    user_id = str(event.user_id)
    
    if user_id in game.skip_votes:
        return
    
    game.skip_votes.add(user_id)
    
    # 计算跳过阈值（单人游戏时1票即可，多人游戏时至少2人或参与人数的一半）
    if len(game.players) == 1:
        threshold = 1
    else:
        threshold = max(2, len(game.players) // 2)
    
    if len(game.skip_votes) >= threshold:
        # 跳过当前题目
        if game.question_timer:
            game.question_timer.cancel()
        
        await bot.send_group_msg(
            group_id=int(game.group_id), 
            message=f"⏭️ 题目已跳过\n正确答案是：{game.current_question.work}\n分类：{game.current_question.category}"
        )
        
        # 进入下一题
        game.current_question_index += 1
        await asyncio.sleep(2)
        await next_question(bot, game.group_id)
    else:
        msg = (
            MessageSegment.at(event.user_id) + 
            Message(f" 发起跳过投票 ({len(game.skip_votes)}/{threshold})")
        )
        await bot.send_group_msg(group_id=int(game.group_id), message=Message(msg))

# 结束游戏
async def end_game(bot: Bot, group_id: str, reason: str = ""):
    game = games[group_id]
    game.status = GameStatus.ENDED
    
    # 取消所有计时器
    if game.game_timer:
        game.game_timer.cancel()
    if game.question_timer:
        game.question_timer.cancel()
    
    # 计算最终排名
    sorted_players = sorted(game.players.values(), key=lambda p: (p.score, p.correct_count), reverse=True)
    
    # 更新积分
    try:
        for i, player in enumerate(sorted_players):
            # 排名奖励
            rank_bonus = 0
            if i == 0 and len(sorted_players) > 1:  # 第一名
                rank_bonus = 8
            elif i == 1 and len(sorted_players) > 2:  # 第二名
                rank_bonus = 5
            elif i == 2 and len(sorted_players) > 3:  # 第三名
                rank_bonus = 3
            
            # 参与奖励
            participation_bonus = 5
            
            # 答题奖励（已在答题时给予）
            total_bonus = rank_bonus + participation_bonus
            
            if total_bonus > 0:
                await update_player_score(
                    player.user_id,
                    group_id,
                    total_bonus,
                    'classic_lines',
                    f'第{i+1}名' if rank_bonus > 0 else '参与奖励',
                    'game_end'
                )
    except Exception as e:
        print(f"更新积分时出错：{str(e)}")
    
    # 生成结果消息
    result_msg = f"🎭 台词大挑战结束！\n{reason}\n\n🏆 最终排名：\n"
    
    for i, player in enumerate(sorted_players[:10]):  # 只显示前10名
        rank_emoji = ["🥇", "🥈", "🥉"][i] if i < 3 else f"{i+1}."
        result_msg += f"{rank_emoji} {player.nickname}：{player.score}分 ({player.correct_count}题正确)\n"
    
    if len(sorted_players) > 10:
        result_msg += f"\n... 还有 {len(sorted_players) - 10} 名玩家\n"
    
    result_msg += f"\n📊 游戏统计：\n"
    result_msg += f"• 总题数：{game.current_question_index}题\n"
    result_msg += f"• 参与人数：{len(game.players)}人\n"
    
    if game.start_time:
        game_duration = int(time.time() - game.start_time)
        result_msg += f"• 游戏时长：{game_duration//60}分{game_duration%60}秒\n"
    
    await bot.send_group_msg(group_id=int(group_id), message=result_msg)
    
    # 清理游戏数据
    if group_id in games:
        del games[group_id]

# 强制结束游戏命令
force_end_game = on_regex(pattern=r'^强制结束台词$', priority=1)
@force_end_game.handle()
async def handle_force_end_game(bot: Bot, event: GroupMessageEvent, state: T_State):
    group_id = str(event.group_id)
    
    if group_id not in games:
        await force_end_game.finish(message="当前没有进行中的台词大挑战游戏")
        return
    
    # 检查是否是管理员
    try:
        admins = await bot.get_group_member_list(group_id=event.group_id)
        user_id = event.user_id
        is_admin = any(
            admin["user_id"] == user_id and 
            (admin["role"] in ["admin", "owner"]) 
            for admin in admins
        )
        
        if not is_admin:
            await force_end_game.finish(message="只有管理员才能强制结束游戏")
            return
    except:
        pass  # 如果获取管理员列表失败，允许任何人结束游戏
    
    if games[group_id].status != GameStatus.ENDED:
        await end_game(bot, group_id, "游戏被管理员强制结束")
    else:
        await force_end_game.finish(message="游戏已经结束")

# 查看游戏状态命令
check_game_status = on_regex(pattern=r'^台词状态$', priority=1)
@check_game_status.handle()
async def handle_game_status(bot: Bot, event: GroupMessageEvent, state: T_State):
    group_id = str(event.group_id)
    
    if group_id not in games:
        await check_game_status.finish(message="当前没有进行中的台词大挑战游戏")
        return
    
    game = games[group_id]
    status_text = ""
    
    if game.status == GameStatus.WAITING:
        status_text = "等待开始"
    elif game.status == GameStatus.SIGNUP:
        status_text = "报名中"
    elif game.status == GameStatus.PLAYING:
        status_text = f"游戏进行中，第{game.current_question_index + 1}题"
    elif game.status == GameStatus.ENDED:
        status_text = "已结束"
    
    player_count = len(game.players)
    
    msg = f"🎭 台词大挑战状态：{status_text}\n"
    msg += f"👥 玩家数量：{player_count}人\n"
    
    if game.status == GameStatus.PLAYING:
        if game.start_time:
            elapsed = int(time.time() - game.start_time)
            remaining = max(0, 180 - elapsed)
            msg += f"⏰ 剩余时间：{remaining//60}分{remaining%60}秒\n"
        
        if game.current_question:
            msg += f"📝 当前题目：{game.current_question.line[:20]}...\n"
        
        # 显示当前排名
        sorted_players = sorted(game.players.values(), key=lambda p: p.score, reverse=True)
        msg += "\n🏆 当前排名：\n"
        for i, player in enumerate(sorted_players[:5]):  # 只显示前5名
            msg += f"{i+1}. {player.nickname}：{player.score}分\n"
    
    await check_game_status.finish(message=msg)

# 台词大挑战帮助命令
lines_help = on_regex(pattern=r'^台词帮助$', priority=1)
@lines_help.handle()
async def handle_lines_help(bot: Bot, event: GroupMessageEvent, state: T_State):
    help_msg = """🎭 经典台词大挑战指令说明：

🎮 游戏指令：
• 开始台词 - 开始新游戏并进入报名阶段
• 报名台词 / jump - 报名参加游戏
• 结束台词报名 - 提前结束报名阶段并开始游戏
• p - 在游戏中发起跳过当前题目的投票
• 台词状态 - 查看当前游戏状态
• 强制结束台词 - 强制结束当前游戏（仅管理员）
• 台词帮助 - 显示此帮助信息

🎯 游戏规则：
• 游戏时长：3分钟
• 每题答题时间：30秒
• 机器人会发出经典台词，玩家需要猜出作品名
• 答对可获得积分，用时越短奖励越高
• 发送 'p' 可发起跳过投票（需要多人同意）

🏆 积分规则：
• 答对基础分：10分
• 用时奖励：最高30分（答题越快奖励越高）
• 难度奖励：根据题目难度给予2-10分
• 排名奖励：第1名+20分，第2名+15分，第3名+10分
• 参与奖励：+5分

📚 题目类型：
• 电影经典台词
• 电视剧经典台词  
• 动漫经典台词
• 经典歌曲
• 古诗词名句
• 综艺
• 等等...
"""
    await lines_help.finish(message=help_msg)